import{_ as p,e as l,f as a,g as e,h as s,i as o,j as i,r,o as c}from"./app-Dnf0Sf9N.js";const d={},u={class:"hint-container note"},h={class:"hint-container note"};function m(g,n){const t=r("RouteLink");return c(),l("div",null,[n[21]||(n[21]=a(`<h1 id="websocket-guide" tabindex="-1"><a class="header-anchor" href="#websocket-guide"><span>WebSocket Guide</span></a></h1><h2 id="talking-to-the-game-engine-overview" tabindex="-1"><a class="header-anchor" href="#talking-to-the-game-engine-overview"><span>Talking to the Game Engine (Overview)</span></a></h2><p>The primary channel for communication between the client (frontend) and the game engine is the WebSocket gateway. This gateway requires <strong>event messages</strong> in a specific JSON schema and responds back with a similar schema.</p><p>The gateway recognizes three inbound event message <strong>types</strong>:</p><ul><li><code>RoundAction</code> - To be sent when a player performs some action</li><li><code>RoundState</code> - To be send when frontend wants the full state of the current game.</li><li><code>Authenticate</code> - To be send to authenticate the player after connecting to gateway.</li></ul><p>For each of these, the gateway responds with these <strong>event types</strong>:</p><ul><li><code>RoundUpdate</code> (in response to <code>RoundAction</code>)</li><li><code>RoundState</code> (in response to <code>RoundState</code>)</li><li><code>Authenticate</code> (in response to <code>Authenticate</code>)</li></ul><p>Each game round has a state which changes depending on user actions. As a quick example, a blackjack <code>RoundAction</code> can be a &quot;Split&quot;. The <code>RoundUpdate</code> response message will contain the neccessary data the frontend requires to show the player after such action. Internally, the engine also keeps a running state of that round in memory which is described later on how that will be used.</p><div class="hint-container warning"><p class="hint-container-title">The gateway can also respond with type <code>Error</code> or <code>Warning</code> Event. In Most cases the client needs to show an error to the user unless stated otherwise in this documentation. See <a href="#error-codes">error codes</a> for a list of error responses to be handled by frontend.</p></div><p>Below is a step-by-step guide on how to connect, authenticate, and interact with the game engine.</p><h2 id="_1-connect-to-gateway" tabindex="-1"><a class="header-anchor" href="#_1-connect-to-gateway"><span>1. Connect to gateway</span></a></h2><p>This WebSocket is session-based, meaning it requires a <code>game_session_id</code> as a query parameter. The below ws should be called to connect to gateway/engine</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">wss://&lt;gateway-url&gt;/v1/ws?game_session_id=&lt;session-id&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The <code>game_session_id</code> is retrieved from the user’s login session. It allows the gateway to authenticate the user, maintain their account information, and track game outcomes during play. For details on obtaining the <code>game_session_id</code>, consult the platform team. This session ID is also used internally to record the user’s results and process account transactions.</p><h2 id="_2-authenticate" tabindex="-1"><a class="header-anchor" href="#_2-authenticate"><span>2. Authenticate</span></a></h2><p>After establishing a WebSocket connection, the first Event message the client should send is Authenticate:</p><h4 id="request-pyaload" tabindex="-1"><a class="header-anchor" href="#request-pyaload"><span>Request pyaload:</span></a></h4><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;eventType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Authenticate&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;eventId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;some-unique-id&gt;&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Field</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>eventType</td><td>string</td><td>Indicates the message type (in this case, Authenticate)</td></tr><tr><td>eventId</td><td>string</td><td>A unique identifier (like a UUID) acting as an idempotency key.</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">If the client resends a request with the same <code>eventId</code>, the gateway recognizes it as a duplicate and won’t reprocess it. Helpful if messages are delayed or lost. In general, frontend should always send a <strong>different</strong> <code>eventId</code> for different events but keep the <strong>same</strong> <code>eventId</code> when <strong>retrying</strong> the same event more than once</p></div><h4 id="successful-response" tabindex="-1"><a class="header-anchor" href="#successful-response"><span>Successful Response</span></a></h4><p>On a successful authentication, the gateway will respond with:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;eventType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Authenticate&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;authenticated&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;eventId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;some-unique-id&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Note that the gateway responds back with the same <code>eventid</code> used in the requested event.</p></div><h4 id="failed-response" tabindex="-1"><a class="header-anchor" href="#failed-response"><span>Failed Response</span></a></h4><p>If authentication fails, the gateway responds with:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;eventType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Authentication Failed&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token string">&quot;AUTHENTICATION_FAILED&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;eventId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;some-unique-id&gt;&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Every <code>Error</code> event type will contain a <code>message</code> field and a <code>code</code>. Client does not neccesarily need to show this to the user. You might prefer a more generic error however, this is useful to trace back any issues to the code if any.</p><div class="hint-container caution"><p class="hint-container-title">If client tries to call any other Event message before authenticating, the below response is thrown:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;eventtype&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Client is not authenticated&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token string">&quot;CLIENT_NOT_AUTHENTICATED&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;eventId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;some-unique-id&gt;&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="_3-send-roundstate" tabindex="-1"><a class="header-anchor" href="#_3-send-roundstate"><span>3. Send RoundState</span></a></h2><p>After successful authentication, send <code>RoundState</code> to check if a user has an active game round in progress. This is especially helpful if the user closed the browser mid-game (e.g., Blackjack), allowing them to resume where they left off.</p><h4 id="request-payload" tabindex="-1"><a class="header-anchor" href="#request-payload"><span>Request payload</span></a></h4><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;eventType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;RoundState&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;gameId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;og-blackjack&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;eventId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;some-action-id&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;data&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Field</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>gameId</td><td>string</td><td>Identifies the specific game (e.g., og-blackjack). Refer to the back office for a list of valid game IDs.</td></tr><tr><td>eventType</td><td>string</td><td>Indicates the message type (in this case, RoundState)</td></tr><tr><td>eventId</td><td>string</td><td>A unique identifier (like a UUID) acting as an idempotency key</td></tr><tr><td>data</td><td>object</td><td>An object containing any necessary data for the request. For <code>RoundState</code>, this can remain empty.</td></tr></tbody></table><h4 id="successful-response-1" tabindex="-1"><a class="header-anchor" href="#successful-response-1"><span>Successful Response</span></a></h4><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;eventType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;RoundState&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;roundId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;36210984-c762-4af6-b40b-39054893749b&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;action&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hit&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;nextActions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Hit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Stand&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Surrender&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Double&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Split&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;roundEnded&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">        <span class="token comment">// ... more game specific data </span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;eventId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;some-unique-id&gt;&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Field</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>roundId</td><td>string</td><td>The ID of the current game round</td></tr><tr><td>eventId</td><td>string</td><td>A unique identifier (like a UUID) acting as an idempotency key</td></tr><tr><td>data</td><td>object</td><td>An object containing <strong>the current full state of the round</strong></td></tr><tr><td>data.action</td><td>string</td><td>The current stage or action in the game (e.g., &quot;Hit&quot;)</td></tr><tr><td>data.nextActions</td><td>list</td><td>An array of possible moves the player can make next</td></tr></tbody></table>`,37)),e("div",u,[n[8]||(n[8]=e("p",{class:"hint-container-title"},"Note",-1)),e("ul",null,[e("li",null,[n[1]||(n[1]=s("Each game may include its own additional fields in data, beyond ")),n[2]||(n[2]=e("code",null,"action",-1)),n[3]||(n[3]=s(" and ")),n[4]||(n[4]=e("code",null,"nextActions",-1)),n[5]||(n[5]=s(". See the ")),o(t,{to:"/api-docs/full-game-specific-guide/blackjack.html"},{default:i(()=>n[0]||(n[0]=[s("full game schemas")])),_:1}),n[6]||(n[6]=s(" below for reference."))]),n[7]||(n[7]=e("li",null,[s("It is very crucial that the next possible action the user can take is part of the "),e("code",null,"nextActions"),s(" set. So client "),e("strong",null,"must only present these possible actions to the player")],-1))])]),n[22]||(n[22]=a(`<h4 id="using-roundupdate-alongside-roundstate" tabindex="-1"><a class="header-anchor" href="#using-roundupdate-alongside-roundstate"><span>Using RoundUpdate Alongside RoundState</span></a></h4><p>The frontend can use the <code>RoundState</code> schema to build or restore the client-side state whenever a user (re)joins a game. Meanwhile, <code>RoundUpdate</code> messages generally follow the same schema structure but provide only incremental or “truncated” updates relevant to that moment. This approach keeps the schemas consistent, so the client logic can handle both <code>RoundState</code> and <code>RoundUpdate</code> in a unified way.</p><h4 id="failed-response-1" tabindex="-1"><a class="header-anchor" href="#failed-response-1"><span>Failed Response</span></a></h4><p>If no active round is found (e.g., the user hasn’t started playing yet), the engine replies with:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;eventType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Warning&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;No round is currently open. You can start a new round&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token string">&quot;GAME_ROUND_NOT_FOUND&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;eventId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;some-action-id&gt;&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This means nothing was found in memory, and the user is free to begin a new round.</p><h2 id="_4-send-roundaction" tabindex="-1"><a class="header-anchor" href="#_4-send-roundaction"><span>4. Send RoundAction</span></a></h2><p>The next request made to the gateway should be a <code>RoundAction</code>. Any <code>RoundAction</code> should have a specific <code>action</code> field which determines what the user wants to do. To start a new round completely the action is <code>Bet</code></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;eventType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;RoundAction&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;action&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bet&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;gameId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;og-blackjack&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;eventId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;some-unique-id&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;payload&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;betAmount&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;perfectPairsAmount&quot;</span><span class="token operator">:</span> <span class="token number">5.5</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;pokerBetAmount&quot;</span><span class="token operator">:</span> <span class="token number">4.5</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All rounds always start with <code>Bet</code> (or <code>Autobet</code> see <a href="#Autobet">Autobet</a>). This Event message, creates a new round id (UUID) internally which will be returned through the <code>RoundUpdate</code>. The engine will respond with a <code>RoundUpdate</code> type of that same <code>action</code>:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;eventType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;RoundUpdate&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;action&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bet&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;eventId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bet-Action-2s1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;nextActions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Hit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Stand&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// ... more game specific data</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;roundId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;36210984-c762-4af6-b40b-39054893749b&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;gameId&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;og-blackjack&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="summary-of-round-lifecycle" tabindex="-1"><a class="header-anchor" href="#summary-of-round-lifecycle"><span>Summary of Round lifecycle</span></a></h2><ol><li><strong>Connect</strong> via <code>wss://&lt;gateway-url&gt;/v1/ws?game_session_id=&lt;session-id&gt;</code>.</li><li><strong>Send</strong> an <code>Authenticate</code> event.</li><li><strong>Receive</strong> either a successful <code>Authenticate</code> response or an <code>Error</code>.</li><li><strong>Send</strong> a <code>RoundState</code> event to retrieve current state.</li><li><strong>Receive</strong> a <code>RoundState</code> response or a <code>Warning</code> if no active round. <ul><li>Present the player with possible <code>nextActions</code> or by default <code>Bet</code> if there are no active rounds.</li></ul></li><li><strong>Send</strong> <code>RoundAction</code> event with an action that player chose from <code>nextActions</code> set (like <code>&quot;Split&quot;</code>, <code>&quot;Hit&quot;</code>, etc...).</li><li><strong>Receive</strong> <code>RoundUpdate</code> events with the latest game info.</li><li><strong>Repeat</strong> 6. &amp; 7. until there are no more <code>nextActions</code> (i.e. empty list) OR until <code>roundEnded</code> is <code>true</code> in <code>RoundUpdate</code></li></ol><h2 id="error-codes" tabindex="-1"><a class="header-anchor" href="#error-codes"><span>Error Codes</span></a></h2><p>These are the error codes &amp; warnings that can be sent by gateway where frontend is required to react. Note that any other error not in this list can occur but frontend is not required to perform any action on those other than notifying the user with a generic error to &quot;try again later&quot; or &quot;refresh the page&quot;</p><table><thead><tr><th>Err Code</th><th>Received From</th><th>Description</th><th>Frontend Reaction</th></tr></thead><tbody><tr><td>GAME_ROUND_NOT_FOUND</td><td>RoundState</td><td>will be returned if there are no active games being played</td><td>Should enable the user to <code>Bet</code> as the only option to start a new round.</td></tr><tr><td>INSUFFICIENT_FUNDS</td><td>RoundAction</td><td>This can be returned if frontend allows the user to place a bet while player has no funds available</td><td>Show a message to user to fund the account</td></tr><tr><td>CLIENT_NOT_AUTHENTICATED</td><td>Any</td><td>Will be sent if a request is made before player is authenticated</td><td>Send Authenticate event to gateway</td></tr><tr><td>INVALID_NEXT_ACTION</td><td>roundUpdate</td><td>If <code>action</code> value is not part of <code>nextActions</code> list</td><td></td></tr><tr><td>INVALID_BET_AMOUNT</td><td>roundUpdate</td><td>Bet amount outside limits</td><td></td></tr><tr><td>BET_LIMIT_REACHED</td><td>roundUpdate</td><td>going above limit thresholds during autobetting</td><td></td></tr><tr><td>INVALID_AUTOBET_MAX</td><td>roundUpdate</td><td></td><td></td></tr><tr><td>INVALID_STOP_ON_PROFIT</td><td>roundUpdate</td><td></td><td></td></tr><tr><td>INVALID_STOP_ON_LOSS</td><td>roundUpdate</td><td></td><td></td></tr><tr><td>INVALID_PAYLOAD_SCHEMA</td><td>roundUpdate</td><td>if input not a valid json</td><td></td></tr><tr><td>INVALID_EVENT_TYPE</td><td>roundUpdate</td><td>if eventType filed has an unexpected string</td><td></td></tr><tr><td>INVALID_ACTION</td><td>roundUpdate</td><td>action field missing (when doing a RoundAction eventType)</td><td></td></tr><tr><td>INVALID_GAME_ID</td><td>roundUpdate</td><td>bad game code</td><td></td></tr><tr><td>INVALID_CURRENCY</td><td>roundUpdate</td><td>missing or invalid currency</td><td></td></tr><tr><td>INVALID_EVENT_INPUTS</td><td>roundUpdate</td><td>any other error not caught with a custom code (should technically</td><td>never occur)</td></tr></tbody></table>`,16)),e("div",h,[n[12]||(n[12]=e("p",{class:"hint-container-title"},"Note",-1)),e("p",null,[n[10]||(n[10]=s("there can be other error codes specific to each game. see ")),o(t,{to:"/api-docs/full-game-specific-guide/blackjack.html"},{default:i(()=>n[9]||(n[9]=[s("full game schemas")])),_:1}),n[11]||(n[11]=s(" for these codes"))])]),n[23]||(n[23]=a(`<h2 id="other-possible-payloads" tabindex="-1"><a class="header-anchor" href="#other-possible-payloads"><span>Other Possible payloads</span></a></h2><h3 id="get-balance" tabindex="-1"><a class="header-anchor" href="#get-balance"><span>Get Balance</span></a></h3><p>Once a websocket connection is established <strong>and authenticated</strong>, a client retrieve the users balance through a ws connection. This is the request payload to get the balance:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;eventType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;GetBalance&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;gameId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{{limbo-id}}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;eventId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;balance-id-1dd&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;currency&quot;</span><span class="token operator">:</span> <span class="token string">&quot;USD&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),e("p",null,[n[14]||(n[14]=s("it follows the same input fields needed in the ")),o(t,{to:"/api-docs/http-guide/get-player-balance.html"},{default:i(()=>n[13]||(n[13]=[s("HTTP GET /balance")])),_:1}),n[15]||(n[15]=s(". The response payload will be:"))]),n[24]||(n[24]=a(`<div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;eventType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;BalanceUpdate&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;eventId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;balance-id-1dd&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;balance&quot;</span><span class="token operator">:</span> <span class="token number">1224.840140402817</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;currency&quot;</span><span class="token operator">:</span> <span class="token string">&quot;USD&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">This could also respond with an <code>error</code> message if something goes wrong in retrieving the balance from casino platform</p></div><h3 id="get-config" tabindex="-1"><a class="header-anchor" href="#get-config"><span>Get config</span></a></h3>`,3)),e("p",null,[n[17]||(n[17]=s("The game configs could be changed in real-time through the CMS. These real-time updates trigger the ")),o(t,{to:"/api-docs/http-guide/game-configs.html"},{default:i(()=>n[16]||(n[16]=[s("POST request webhook")])),_:1}),n[18]||(n[18]=s(" which sends the new game configs to the gateway. The gateway then broadcasts these changes to ")),n[19]||(n[19]=e("strong",null,"ALL clients",-1)),n[20]||(n[20]=s(" that are connected to the websocket server. Thus the clients have a passive, real time update of configs. The broadcasted message looks like:"))]),n[25]||(n[25]=a(`<div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;eventType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;UpdateConfig&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;gameId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;og-limbo&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;gameId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;og-limbo&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;maxBet&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5000.00&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;minBet&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.00&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;customProps&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">&quot;minTargetMultiplier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.01&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;maxTargetMultiplier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1000000.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;minWinChance&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.000099&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;maxWinChance&quot;</span><span class="token operator">:</span> <span class="token string">&quot;98.01980198&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It could be for any gameId that is currently available. So if a client is not interested in game&#39;s the user is not playing on that socket, that they could easily ignore/discard the incoming message.</p>`,2))])}const k=p(d,[["render",m],["__file","websocket-guide.html.vue"]]),b=JSON.parse('{"path":"/api-docs/websocket-guide.html","title":"WebSocket Guide","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Talking to the Game Engine (Overview)","slug":"talking-to-the-game-engine-overview","link":"#talking-to-the-game-engine-overview","children":[]},{"level":2,"title":"1. Connect to gateway","slug":"_1-connect-to-gateway","link":"#_1-connect-to-gateway","children":[]},{"level":2,"title":"2. Authenticate","slug":"_2-authenticate","link":"#_2-authenticate","children":[]},{"level":2,"title":"3. Send RoundState","slug":"_3-send-roundstate","link":"#_3-send-roundstate","children":[]},{"level":2,"title":"4. Send RoundAction","slug":"_4-send-roundaction","link":"#_4-send-roundaction","children":[]},{"level":2,"title":"Summary of Round lifecycle","slug":"summary-of-round-lifecycle","link":"#summary-of-round-lifecycle","children":[]},{"level":2,"title":"Error Codes","slug":"error-codes","link":"#error-codes","children":[]},{"level":2,"title":"Other Possible payloads","slug":"other-possible-payloads","link":"#other-possible-payloads","children":[{"level":3,"title":"Get Balance","slug":"get-balance","link":"#get-balance","children":[]},{"level":3,"title":"Get config","slug":"get-config","link":"#get-config","children":[]}]}],"git":{"updatedTime":1747046113000,"contributors":[{"name":"cybeni","username":"cybeni","email":"mail2048@pm.me","commits":1,"url":"https://github.com/cybeni"},{"name":"Cybeni","username":"Cybeni","email":"mail2048@pm.me","commits":3,"url":"https://github.com/Cybeni"}],"changelog":[{"hash":"a0f1afaf7460e397331bd85df6a92bcd4edc6a7e","date":1747046113000,"email":"mail2048@pm.me","author":"Cybeni","message":"wip","commitUrl":"https://github.com/bernardcosta/Tangiers/commit/a0f1afaf7460e397331bd85df6a92bcd4edc6a7e"},{"hash":"20456f2fa2b95024460509d208c628e39dc8c027","date":1747037435000,"email":"mail2048@pm.me","author":"Cybeni","message":"config updates","commitUrl":"https://github.com/bernardcosta/Tangiers/commit/20456f2fa2b95024460509d208c628e39dc8c027"},{"hash":"32ec384faf25ee6d0f5e56fcae961cbfd073ad54","date":1746610058000,"email":"mail2048@pm.me","author":"Cybeni","message":"added granular error codes","commitUrl":"https://github.com/bernardcosta/Tangiers/commit/32ec384faf25ee6d0f5e56fcae961cbfd073ad54"},{"hash":"119f5466c2a6a93e115bbe6481b69a140feb7248","date":1741432051000,"email":"mail2048@pm.me","author":"cybeni","message":"initial commit","commitUrl":"https://github.com/bernardcosta/Tangiers/commit/119f5466c2a6a93e115bbe6481b69a140feb7248"}]},"filePathRelative":"api-docs/websocket-guide.md"}');export{k as comp,b as data};
